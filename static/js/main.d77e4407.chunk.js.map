{"version":3,"sources":["components/CharacterCard/CharacterCard.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","onClick","clickCharacter","id","className","class","src","image","alt","Title","children","message","topScore","score","App","state","characters","clicked","character","_this","filter","item","forEach","element","setState","newScore","Math","max","_this2","this","components_Title_Title","sort","b","random","map","friend","components_CharacterCard_CharacterCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0xDAqBeA,MAlBf,SAAuBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAWT,WACIJ,EAAMK,eAAeL,EAAMM,KAZAC,UAAU,oCACjCN,EAAAC,EAAAC,cAAA,OAAKK,MAAM,QACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,QACPP,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,MAAOH,UAAU,eAAeI,IAAKX,EAAMM,KAC3DL,EAAAC,EAAAC,cAAA,OAAKK,MAAM,qCCMhBI,MAZf,SAAeZ,GACX,OAAOC,EAAAC,EAAAC,cAAA,OACHI,UAAU,4EACVN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACXN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAcP,EAAMa,UACpCZ,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAcP,EAAMc,SACpCb,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAhB,cAAyCP,EAAMe,UAC/Cd,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAhB,UAAqCP,EAAMgB,iBCsDxCC,6MAzDXC,MAAQ,CACJC,WAAYA,EACZH,MAAO,EACPD,SAAU,EACVK,SAAS,KAGbf,eAAiB,SAAAC,GACb,IAAMe,EAAYC,EACbJ,MACAC,WACAI,OAAO,SAAAC,GAAI,OAAIA,EAAKlB,KAAOA,IAAI,GACpC,GAAIe,EAAUD,QACVE,EACKJ,MACAC,WACAM,QAAQ,SAAAC,GACLA,EAAQN,SAAU,IAG1BE,EAAKK,SAAS,CAACR,WAAYA,EAAYH,MAAO,QAE3C,CACHK,EAAUD,SAAU,EACpB,IAAMQ,EAAWN,EAAKJ,MAAMF,MAAQ,EAC9BD,EAAWc,KAAKC,IAAIR,EAAKJ,MAAMH,SAAUa,GAC/CN,EAAKK,SAAS,CAACR,WAAYG,EAAKJ,MAAMC,WAAYH,MAAOY,EAAUb,SAAUA,8EAI5E,IAAAgB,EAAAC,KACL,OACI/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8B,EAAD,CACIjB,MAAOgB,KAAKd,MAAMF,MAClBD,SAAUiB,KAAKd,MAAMH,SACrBD,QAA8B,KAArBkB,KAAKd,MAAMF,MAClB,WACA,IALN,eAOAf,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACVyB,KACId,MACAC,WACAe,KAAK,SAAChC,EAAGiC,GAAJ,OAAUN,KAAKO,SAAW,KAC/BC,IAAI,SAAAC,GAAM,OAAKrC,EAAAC,EAAAC,cAACoC,EAAD,CACZlC,eAAgB0B,EAAK1B,eACrBC,GAAIgC,EAAOhC,GACXI,MAAO4B,EAAO5B,oBAnD5B8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d77e4407.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CharacterCard.css\";\n\nfunction CharacterCard(props) {\n    return (\n        <div onClick={cardClicked} className=\"col-lg-4 col-md-6 flex-container\">\n            <div class=\"card\">\n                <div class=\"view\">\n                    <img src={props.image} className=\"card-img-top\" alt={props.id}/>\n                    <div class=\"mask rgba-white-slight\"></div>\n                </div>\n            </div>\n        </div>\n\n    );\n\n    function cardClicked() {\n        props.clickCharacter(props.id);\n    }\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./Title.css\"\n\nfunction Title(props) {\n    return <nav\n        className=\"navbar nav fixed-top navbar-light bg-info justify-content-between sticky\">\n        <div className=\"container\">\n            <span className=\"text-light\">{props.children}</span>\n            <span className=\"text-light\">{props.message}</span>\n            <span className=\"text-light\">Top Score: {props.topScore}</span>\n            <span className=\"text-light\">Score: {props.score}</span>\n        </div>\n    </nav>;\n}\n\nexport default Title;","import React, {Component} from \"react\";\nimport CharacterCard from \"./components/CharacterCard/CharacterCard\";\nimport Title from \"./components/Title/Title\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n    state = {\n        characters: characters,\n        score: 0,\n        topScore: 0,\n        clicked: false\n    };\n\n    clickCharacter = id => {\n        const character = this\n            .state\n            .characters\n            .filter(item => item.id === id)[0];\n        if (character.clicked) {\n            this\n                .state\n                .characters\n                .forEach(element => {\n                    element.clicked = false;\n                });\n\n            this.setState({characters: characters, score: 0});\n\n        } else {\n            character.clicked = true;\n            const newScore = this.state.score + 1;\n            const topScore = Math.max(this.state.topScore, newScore);\n            this.setState({characters: this.state.characters, score: newScore, topScore: topScore});\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <Title\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                    message={this.state.score === 12\n                    ? \"YOU WON!\"\n                    : \"\"}>\n                    Memory Game</Title>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {this\n                            .state\n                            .characters\n                            .sort((a, b) => Math.random() - 0.5)\n                            .map(friend => (<CharacterCard\n                                clickCharacter={this.clickCharacter}\n                                id={friend.id}\n                                image={friend.image}/>))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}